C51 COMPILER V9.54   UART_TASK                                                             05/02/2017 13:31:24 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART_TASK
OBJECT MODULE PLACED IN .\Objects\uart_task.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE task\uart\uart_task.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listin
                    -gs\uart_task.lst) OBJECT(.\Objects\uart_task.obj)

line level    source

   1          #include "task/uart/uart_task.h"
   2          
   3          /* UART2 */
   4          extern xdata  Byte     recv2_buf[MAX_RecvFrame];             // receiving buffer
   5          extern xdata  Byte     recv2_state;                          // receive state
   6          extern xdata  Byte     recv2_timer;                          // receive time-out, ÓÃÓÚ×Ö½Ú¼ä³¬Ê±ÅÐ¶¨
   7          extern xdata  Byte     recv2_chksum;                         // computed checksum
   8          extern xdata  Byte     recv2_ctr;                            // reveiving pointer
   9          
  10          extern xdata  Byte     trans2_buf[MAX_TransFrame];           // uart transfer message buffer
  11          extern xdata  Byte     trans2_ctr;                           // transfer pointer
  12          extern xdata  Byte     trans2_size;                          // transfer bytes number
  13          extern xdata  Byte     trans2_chksum;                        // computed check-sum of already transfered m
             -essage
  14          
  15          extern xdata  Byte     uart2_q_index;                        // ÕýÔÚ·¢ËÍÄ³¶ÓÁÐÏîµÄÐòºÅ£ºÈôÎª0xFF, ±íÊ¾Ã»ÓÐ
             -ÈÎºÎÏî½øÈë·¢ËÍÁ÷³Ì
  16          extern xdata  sUART_Q  uart2_send_queue[UART_QUEUE_NUM];     // ´®¿Ú·¢ËÍ¶ÓÁÐ
  17          extern xdata  sUART_Q  uart2_recv_queue[UART_QUEUE_NUM];     // ´®¿Ú½ÓÊÕ¶ÓÁÐ
  18          
  19          /* System */
  20          extern data   Uint16   gl_ack_tick;                              //ÉÏÎ»»ú485¿ÚÓ¦´ðÑÓÊ±¼ÆÊ± tick
  21          extern data   Byte     gl_comm_addr;                         //RS485Í¨ÐÅµØÖ·
  22          extern data   Byte     gl_reply_tick;                        //ÉèÖÃ·µ»ØÑÓÊ±
  23          extern data   Byte     watch_dog_tick;
  24          
  25          /* AD sample */
  26          extern data   Byte     ad_alarm_exts;                        //±¨¾¯±êÖ¾£º00-ÎÞ±¨¾¯,01-1#·ÀÇø±¨¾¯£¬02-2#·ÀÇ
             -ø±¨¾¯£¬03-1#·ÀÇøºÍ2#·ÀÇøÍ¬Ê±±¨¾¯
  27          extern data   Byte     alarm_host_read[2];                   //±¨¾¯Ö÷»úÊÇ·ñ¶ÁÈ¡ÁË±¾Éè±¸µÄ±¨¾¯×´Ì¬
  28          
  29          
  30          void uart_task_init(void)
  31          {
  32   1              Byte i;
  33   1      
  34   1              //uart2Ïà¹Ø±äÁ¿³õÊ¼»¯
  35   1              recv2_state    = FSA_INIT;
  36   1              recv2_timer    = 0;
  37   1              recv2_ctr      = 0;
  38   1              recv2_chksum   = 0;
  39   1      
  40   1              trans2_size    = 0;
  41   1              trans2_ctr     = 0;
  42   1      
  43   1              for (i = 0; i < UART_QUEUE_NUM; i++) {
  44   2                      uart2_send_queue[i].flag = 0; //¾ù¿ÕÏÐ
  45   2                      uart2_recv_queue[i].flag = 0; //¾ù¿ÕÏÐ
  46   2              }
  47   1              uart2_q_index = 0xFF;             //ÎÞ¶ÓÁÐÏî½øÈë·¢ËÍÁ÷³Ì
  48   1      
  49   1              //UARTÓ²¼þ³õÊ¼»¯
  50   1              uart_init();                      //ÒÑ¾­×¼±¸ºÃ´®¿ÚÊÕ·¢£¬Ö»ÊÇ»¹Î´Ê¹ÄÜÈ«¾ÖÖÐ¶Ï
  51   1      }
C51 COMPILER V9.54   UART_TASK                                                             05/02/2017 13:31:24 PAGE 2   

  52          
  53          void uart_task(void)
  54          {
  55   1              Byte i,j;
  56   1              Byte *ptr;
  57   1              
  58   1              //1. UART2 ¶ÓÁÐ´¦Àí
  59   1              //ÕÒÊÇ·ñÓÐµÈ´ý´¦ÀíµÄÏî
  60   1              for (j = 0; j < UART_QUEUE_NUM; j++) {
  61   2                      if (uart2_recv_queue[j].flag == 1) {//ÓÐµÈ´ý´¦ÀíµÄÏî
  62   3                              ptr = uart2_recv_queue[j].tdata;
  63   3                              
  64   3                              //ÊÇ·ñÐèÒªÖ´ÐÐ±¾ÃüÁî
  65   3                              if ((ptr[0] == CMD_ADDR_BC) || (ptr[0] == gl_comm_addr)) {
  66   4                                      //¹ã²¥µØÖ·»òÖ¸¶¨±¾Éè±¸, ÐèÒªÖ´ÐÐ
  67   4                                      switch (ptr[3])
  68   4                                      {
  69   5                                      case CMD_DADDR_qSTAT://Ñ¯ÎÊ·ÀÇø×´Ì¬ - ±¨¸æ¸øÉÏÎ»»ú
  70   5                                              //ÔÚUART2·¢ËÍ¶ÓÁÐÖÐÕÒ¿ÕÏÐBuffer
  71   5                                              i = uart2_get_send_buffer();
  72   5                                              if (i < UART_QUEUE_NUM) {
  73   6                                                      //ÕÒµ½ÁË¿ÕÏÐbuffer, ×¼±¸Ó¦´ð                                    
  74   6                                                      uart2_send_queue[i].tdata[0] = FRAME_STX;              //Ö¡Í·
  75   6                                                      uart2_send_queue[i].tdata[1] = ptr[1];             //Ä¿µÄµØÖ·
  76   6                                                      uart2_send_queue[i].tdata[2] = gl_comm_addr;       //Ô´µØÖ·
  77   6                                                      if (gl_comm_addr == CMD_ADDR_UNSOLV) {             //±¾Éè±¸ÎÞÓÐÐ§µØÖ·
  78   7                                                              //Ö»»Ø²ÎÊýÓ¦´ð
  79   7                                                              uart2_send_queue[i].tdata[3] = 1;
  80   7                                                              uart2_send_queue[i].tdata[4] = CMD_DADDR_aPARA;
  81   7                                                              uart2_send_queue[i].len = 6;
  82   7                                                      } else { //ÓÐÓÐÐ§µØÖ·,»Ø·ÀÇø×´Ì¬
  83   7                                                              if ((ad_alarm_exts & 0x03) == 0x00) { //2¸ö·ÀÇø¾ùÎÞ±¨¾¯
  84   8                                                                      uart2_send_queue[i].tdata[3] = 1;
  85   8                                                                      uart2_send_queue[i].tdata[4] = CMD_ACK_OK;
  86   8                                                                      uart2_send_queue[i].len = 6;
  87   8                                                              } else { //ÓÐ±¨¾¯
  88   8                                                                      uart2_send_queue[i].tdata[3] = 2;
  89   8                                                                      uart2_send_queue[i].tdata[4] = CMD_DADDR_aSTAT;
  90   8                                                                      uart2_send_queue[i].tdata[5] = (ad_alarm_exts & 0x03);
  91   8                                                                      uart2_send_queue[i].len = 7;
  92   8                                                              }
  93   7                                                              
  94   7                                                              //±¨¾¯Ê±¼ä×î³¤Ö»»á±£³Ö10s£¬Èç¹û10sÖ®ÄÚ±¨¾¯Ö÷»úÃ»ÓÐÀ´¶Á£¬±¨¾¯×´Ì¬»á×Ô¶¯»Ö¸´
  95   7                                                              //Èç¹û10sÖ®ÄÚ£¬±¨¾¯Ö÷»ú¶ÁÈ¡ÁË±¾Éè±¸µÄ±¨¾¯×´Ì¬£¬±¾Éè±¸µÄ±¨¾¯×´Ì¬»á×Ô¶¯»Ö¸´£¬²»»á¼ÌÐø±¨¾¯
  96   7                                                              alarm_host_read[0] = 1;
  97   7                                                              alarm_host_read[1] = 1;
  98   7                                                      }
  99   6                                              }
 100   5                                              
 101   5                                              break;
 102   5      
 103   5                                      case CMD_DADDR_qPARA://Ñ¯ÎÊµØÖ·- ±¨¸æ¸øÉÏÎ»»ú
 104   5                                              //ÔÚUART2·¢ËÍ¶ÓÁÐÖÐÕÒ¿ÕÏÐBuffer
 105   5                                              i = uart2_get_send_buffer();
 106   5                                              if (i < UART_QUEUE_NUM) {
 107   6                                                      //ÕÒµ½ÁË¿ÕÏÐbuffer, ×¼±¸Ó¦´ð                                    
 108   6                                                      uart2_send_queue[i].tdata[0] = FRAME_STX;                      //Ö¡Í·
 109   6                                                      uart2_send_queue[i].tdata[1] = ptr[1];                     //Ä¿µÄµØÖ·
 110   6                                                      uart2_send_queue[i].tdata[2] = gl_comm_addr;               //Ô´µØÖ·
 111   6                                                      uart2_send_queue[i].tdata[3] = 1;                          //ÃüÁî³¤¶È
 112   6                                                      uart2_send_queue[i].tdata[4] = CMD_DADDR_aPARA;            //ÃüÁîID
 113   6                                                      uart2_send_queue[i].len = 6;
C51 COMPILER V9.54   UART_TASK                                                             05/02/2017 13:31:24 PAGE 3   

 114   6                                              }
 115   5                                              
 116   5                                              break;
 117   5                                              
 118   5                                      case 0xE3://ÉèÖÃÑÓÊ±Ê±¼ä
 119   5                          //1. Ð´Èëflash
 120   5                          flash_enable();                              
 121   5                          flash_erase(EEPROM_SECTOR1);                                        
 122   5                          flash_write(ptr[4], EEPROM_SECTOR1 + 1);  
 123   5                          flash_write(0x5a, EEPROM_SECTOR1);                                                    
             -          
 124   5                          flash_disable();
 125   5      
 126   5                          //2. ¸üÐÂ±äÁ¿
 127   5                          gl_reply_tick = ptr[4];
 128   5                                      
 129   5                          break;
 130   5      
 131   5                      case 0xE4://¶ÁÈ¡ÑÓÊ±Ê±¼ä
 132   5                          //ÔÚUART3¶ÓÁÐÖÐÕÒ¿ÕÏÐBuffer
 133   5                          i = uart2_get_send_buffer();
 134   5                          if (i < UART_QUEUE_NUM) { //ÕÒµ½ÁË¿ÕÏÐbuffer, ×¼±¸Ó¦´ð                       
 135   6                              uart2_send_queue[i].tdata[0] = FRAME_STX;                          //Ö¡Í·
 136   6                              uart2_send_queue[i].tdata[1] = ptr[1];                         //Ä¿µÄµØÖ·
 137   6                              uart2_send_queue[i].tdata[2] = gl_comm_addr;                   //Ô´µØÖ·                                                                                                         
             -                 
 138   6                              uart2_send_queue[i].tdata[3] = 2;
 139   6                              uart2_send_queue[i].tdata[4] = 0xF4;
 140   6                              uart2_send_queue[i].tdata[5] = gl_reply_tick;
 141   6                              uart2_send_queue[i].len = 7;                                                                                                            
 142   6                          }
 143   5                          
 144   5                          break;      
 145   5                                      }
 146   4                                      
 147   4                                      //ÉèÖÃÓ¦´ðÑÓÊ±
 148   4                      Disable_interrupt();
 149   4                      //gl_ack_tick = gl_comm_addr - 15;
 150   4                                      gl_ack_tick = (Uint16)(REPLY_DLY + (Uint16)((gl_comm_addr - 16) * gl_reply_tick) / SCHEDULER_TICK);
 151   4      
 152   4                                      // ÖØ×°³õÖµ
 153   4                                      TR0 = 0;
 154   4                                      TL0 = 0x00;                                           // ÉèÖÃ¶¨Ê±³õÖµ
 155   4                                      TH0 = 0xDC;                                           // ÉèÖÃ¶¨Ê±³õÖµ
 156   4                                      //TH0 = 0x28;                                     // ÉèÖÃ¶¨Ê±³õÖµ
 157   4                                      TR0 = 1;                                              // ¶¨Ê±Æ÷0¿ªÊ¼¼ÆÊ±
 158   4                                      
 159   4                      Enable_interrupt();
 160   4                              }
 161   3      
 162   3                              //´¦ÀíÍê³É,ÊÍ·Å¸Ã¶ÓÁÐÏî
 163   3                              uart2_recv_queue[j].flag = 0;
 164   3                              break;
 165   3                      }
 166   2              }
 167   1      
 168   1              //2. UART2 ¶ÓÁÐ·¢ËÍ
 169   1              if ((uart2_q_index == 0xFF) && (recv2_state == FSA_INIT)) {
 170   2                      //UART2ÎÞ½øÈë·¢ËÍÁ÷³ÌµÄ¶ÓÁÐÏî, ÕÒÊÇ·ñÓÐµÈ´ý·¢ËÍµÄÏî
 171   2                      for (i = 0; i < UART_QUEUE_NUM; i++) {
 172   3                              if ((uart2_send_queue[i].flag == 1) && (gl_ack_tick == 0)) {
 173   4                                      //ÖØÐÂ¸³Öµ
C51 COMPILER V9.54   UART_TASK                                                             05/02/2017 13:31:24 PAGE 4   

 174   4                                      //watch_dog_tick = 0xFF;
 175   4                                      
 176   4                                      //ÓÐµÈ´ý·¢ËÍµÄÏî£¬°²ÅÅ´ËÏî·¢ËÍ
 177   4                                      uart2_send_queue[i].flag = 2;
 178   4                                      uart2_q_index = i;
 179   4                                      memcpy(trans2_buf, uart2_send_queue[i].tdata, uart2_send_queue[i].len - 1);
 180   4                                      trans2_size = uart2_send_queue[i].len;
 181   4                                      uart2_start_trans();
 182   4                                      break;
 183   4                              }
 184   3                      }
 185   2              }
 186   1      }
 187          
 188          /***************************************************************************
 189          * NAME: uart2_get_send_buffer
 190          *----------------------------------------------------------------------------
 191          * PARAMS:
 192          * return: Byte
 193          *         Èô·µ»ØÖµ >= UART_QUEUE_NUM, Ôò±íÊ¾Ã»ÓÐÉêÇëµ½¿ÕÏÐbuffer
 194          *----------------------------------------------------------------------------
 195          * PURPOSE: ÔÚ´®¿Ú2¶ÓÁÐÖÐÑ°ÕÒ¿ÕÏÐ¶ÓÁÐÏî£¬ÈôÕÒµ½£¬·µ»Ø¶ÓÁÐÏîÐòºÅ(0 ~ (UART_QUEUE_NUM-1))
 196          *****************************************************************************/
 197          Byte uart2_get_send_buffer(void)
 198          {
 199   1              Byte i, flag;
 200   1      
 201   1              for (i = 0; i < UART_QUEUE_NUM; i++) {
 202   2                      Disable_interrupt();
 203   2                      flag = uart2_send_queue[i].flag;
 204   2                      Enable_interrupt();
 205   2                      if (flag == 0) {  //ÒÑÕÒµ½¿ÕÏÐBuffer
 206   3                              uart2_send_queue[i].flag = 1;
 207   3                              break;
 208   3                      }
 209   2              }
 210   1              return i;
 211   1      }
 212          
 213          /***************************************************************************
 214          * NAME: uart2_get_recv_buffer
 215          *----------------------------------------------------------------------------
 216          * PARAMS:
 217          * return: Byte
 218          *         Èô·µ»ØÖµ >= UART_QUEUE_NUM, Ôò±íÊ¾Ã»ÓÐÉêÇëµ½¿ÕÏÐbuffer
 219          *----------------------------------------------------------------------------
 220          * PURPOSE: ÔÚ´®¿Ú2¶ÓÁÐÖÐÑ°ÕÒ¿ÕÏÐ¶ÓÁÐÏî£¬ÈôÕÒµ½£¬·µ»Ø¶ÓÁÐÏîÐòºÅ(0 ~ (UART_QUEUE_NUM-1))
 221          *****************************************************************************/
 222          Byte uart2_get_recv_buffer(void)
 223          {
 224   1              Byte i, flag;
 225   1      
 226   1              for (i = 0; i < UART_QUEUE_NUM; i++) {
 227   2                      Disable_interrupt();
 228   2                      flag = uart2_recv_queue[i].flag;
 229   2                      Enable_interrupt();
 230   2                      if (flag == 0) {  //ÒÑÕÒµ½¿ÕÏÐBuffer
 231   3                              uart2_recv_queue[i].flag = 1;
 232   3                              break;
 233   3                      }
 234   2              }
 235   1              return i;
C51 COMPILER V9.54   UART_TASK                                                             05/02/2017 13:31:24 PAGE 5   

 236   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1107    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
