C51 COMPILER V9.54   UART_DRV                                                              04/30/2017 13:50:23 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE UART_DRV
OBJECT MODULE PLACED IN .\Objects\uart_drv.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE driver\uart\uart_drv.c OMF2 OPTIMIZE(8,SPEED) BROWSE DEBUG PRINT(.\Listi
                    -ngs\uart_drv.lst) OBJECT(.\Objects\uart_drv.obj)

line level    source

   1          #include "driver/uart/uart_drv.h"
   2          
   3          #define S2TI   0x02
   4          #define S2RI   0x01
   5          
   6          /* UART2 */
   7          extern xdata  Byte     recv2_buf[MAX_RecvFrame];             // receiving buffer
   8          extern xdata  Byte     recv2_state;                          // receive state
   9          extern xdata  Byte     recv2_timer;                          // receive time-out, 用于字节间超时判定
  10          extern xdata  Byte     recv2_chksum;                         // computed checksum
  11          extern xdata  Byte     recv2_ctr;                            // reveiving pointer
  12          
  13          extern xdata  Byte     trans2_buf[MAX_TransFrame];           // uart transfer message buffer
  14          extern xdata  Byte     trans2_ctr;                           // transfer pointer
  15          extern xdata  Byte     trans2_size;                          // transfer bytes number
  16          extern xdata  Byte     trans2_chksum;                        // computed check-sum of already transfered m
             -essage
  17          
  18          extern xdata  Byte     uart2_q_index;                        // 正在发送某队列项的序号：若为0xFF, 表示没有
             -任何项进入发送流程
  19          extern xdata  sUART_Q  uart2_send_queue[UART_QUEUE_NUM];     // 串口发送队列
  20          extern xdata  sUART_Q  uart2_recv_queue[UART_QUEUE_NUM];     // 串口接收队列
  21          
  22          /* System */
  23          extern data   Uint16   gl_ack_tick;                              //上位机485口应答延时计时 tick
  24          extern data   Byte     gl_comm_addr;                         //RS485通信地址
  25          extern data   Byte     gl_reply_tick;                        //设置返回延时
  26          
  27          #define UART2_RECEIVE_ENABLE()    (S2CON |= 0x10)
  28          #define UART2_RECEIVE_DISABLE()   (S2CON &= 0xEF)
  29          
  30          extern Byte uart2_get_recv_buffer(void);
  31          
  32          void uart_init(void)    //9600bps@22.1184MHz
  33          {
  34   1              //uart2硬件初始化
  35   1              AUXR1 |= 0x10;      //串口2从P1口切换到P4口
  36   1              S2CON = 0x50;           //8位数据,可变波特率,接收使能
  37   1              AUXR &= 0xF7;           //波特率不倍速
  38   1              AUXR &= 0xFB;           //独立波特率发生器时钟为Fosc/12,即12T
  39   1              BRT = 0xFA;                 //设定独立波特率发生器重装值
  40   1              AUXR |= 0x10;           //启动独立波特率发生器
  41   1              IE2 |= 0x01;        //使能串口2中断
  42   1              IP2H &= 0xFE;       //设置中断优先级为优先级1
  43   1              IP2 |= 0x01;
  44   1                      
  45   1              //RS485接口初始化
  46   1              bRS485_Ctrl = 0;    //半双工，接收
  47   1      
  48   1              _nop_();
  49   1              _nop_();
  50   1              _nop_();
  51   1              _nop_();
  52   1      }
C51 COMPILER V9.54   UART_DRV                                                              04/30/2017 13:50:23 PAGE 2   

  53          
  54          void uart2_isr(void) interrupt SIO2_VECTOR using 1
  55          {
  56   1              volatile Byte nop_num;
  57   1              Byte c,i;
  58   1      
  59   1              if (S2CON & S2TI) { //UART2发送中断
  60   2                      trans2_ctr++;   //取下一个待传送index
  61   2                      if (trans2_ctr < trans2_size) { //未传送完成
  62   3                              if (trans2_ctr == (trans2_size - 1)) { //已经指向校验字节
  63   4                                      S2BUF = trans2_chksum;    //发送校验字节
  64   4                              } else { //非校验字节, 需要传送并计算checksum
  65   4                                      S2BUF = trans2_buf[trans2_ctr];
  66   4                                      if (trans2_ctr > 0) { //计算check_sum
  67   5                                              trans2_chksum += trans2_buf[trans2_ctr];   //更新chksum
  68   5                                      }
  69   4                              }
  70   3                      } else { //已经全部传送完成(含校验字节)，可以置发送器空闲
  71   3                              //目前设计：均不需等待应答, 可以释放该队列项
  72   3                              if (uart2_q_index < UART_QUEUE_NUM) {
  73   4                                      uart2_send_queue[uart2_q_index].flag = 0;   //该队列项空闲
  74   4                              }
  75   3                              
  76   3                              uart2_q_index = 0xFF;    //无队列项在发送
  77   3                              nop_num = 100;
  78   3                              while (nop_num--);
  79   3                              bRS485_Ctrl = 0;             //禁止发送, 转为接收
  80   3                              UART2_RECEIVE_ENABLE();  //UART2允许接收                
  81   3                      }
  82   2              
  83   2                      S2CON &= ~S2TI;   //must clear by user software
  84   2              }
  85   1              
  86   1              if (S2CON & S2RI) { //接收中断
  87   2                      c = S2BUF;
  88   2                      switch (recv2_state)
  89   2                      {
  90   3                      case FSA_INIT://是否为帧头
  91   3                              if (c == FRAME_STX) { //为帧头, 开始新的一帧
  92   4                                      recv2_ctr = 0;
  93   4                                      recv2_chksum = 0;
  94   4                                      recv2_timer = RECV_TIMEOUT;
  95   4                                      recv2_state = FSA_ADDR_D;
  96   4                              }
  97   3                              break;
  98   3      
  99   3                      case FSA_ADDR_D://为目的地址, 开始保存并计算效验和
 100   3                              recv2_buf[recv2_ctr++] = c;
 101   3                              recv2_chksum += c;
 102   3                              recv2_timer = RECV_TIMEOUT;
 103   3                              recv2_state = FSA_ADDR_S;
 104   3                              break;
 105   3      
 106   3                      case FSA_ADDR_S://为源地址
 107   3                              recv2_buf[recv2_ctr++] = c;
 108   3                              recv2_chksum += c;
 109   3                              recv2_timer = RECV_TIMEOUT;
 110   3                              recv2_state = FSA_LENGTH;
 111   3                              break;
 112   3      
 113   3                      case FSA_LENGTH://为长度字节
 114   3                              if ((c > 0) && (c < (MAX_RecvFrame - 3))) { //有效串
C51 COMPILER V9.54   UART_DRV                                                              04/30/2017 13:50:23 PAGE 3   

 115   4                                      recv2_buf[recv2_ctr++] = c;    //第三个字节保存长度
 116   4                                      recv2_chksum += c;
 117   4                                      recv2_timer = RECV_TIMEOUT;
 118   4                                      recv2_state = FSA_DATA;
 119   4                              } else {        //非有效串
 120   4                                      recv2_state = FSA_INIT;
 121   4                              }
 122   3                              break;
 123   3      
 124   3                      case FSA_DATA://读取命令串
 125   3                              recv2_buf[recv2_ctr] = c;
 126   3                              recv2_chksum += c;   //更新校验和
 127   3                              if (recv2_ctr == (recv2_buf[2] + 2)) { //已经收到指定长度的命令数据
 128   4                                      recv2_state = FSA_CHKSUM;
 129   4                              } else {        //还未结束
 130   4                                      recv2_ctr++;
 131   4                              }
 132   3                              recv2_timer = RECV_TIMEOUT;
 133   3                              break;
 134   3      
 135   3                      case FSA_CHKSUM://检查校验字节
 136   3                              if (recv2_chksum == c) {//已经收到完整一帧
 137   4                                      //只保存报警主机发送的广播命令和单播命令，其他设备返回的数据包全部丢弃
 138   4                                      if ((recv2_buf[0] == CMD_ADDR_BC) || (recv2_buf[0] == gl_comm_addr)) {
 139   5                                          i = uart2_get_recv_buffer();
 140   5                                              if (i < UART_QUEUE_NUM) {//找到了空闲buffer, 写入data
 141   6                                                      memcpy(uart2_recv_queue[i].tdata, recv2_buf, recv2_buf[2] + 3);
 142   6                                                      
 143   6                                                      gl_ack_tick = 100;
 144   6                                              }
 145   5                                      }
 146   4                              }
 147   3                      default://复位
 148   3                              recv2_state = FSA_INIT;
 149   3                              break;
 150   3                      }
 151   2              
 152   2                      S2CON &= ~S2RI;     //must clear by user software
 153   2              }
 154   1      }
 155          
 156          void uart2_start_trans(void)
 157          {       
 158   1              volatile Byte nop_num = 100;
 159   1      
 160   1              UART2_RECEIVE_DISABLE();
 161   1              _nop_();
 162   1              _nop_();
 163   1              bRS485_Ctrl = 1;    //允许发送
 164   1              while (nop_num--);
 165   1              trans2_chksum = 0;
 166   1              trans2_ctr = 0;
 167   1              S2BUF = trans2_buf[trans2_ctr];
 168   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    575    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       2
C51 COMPILER V9.54   UART_DRV                                                              04/30/2017 13:50:23 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
